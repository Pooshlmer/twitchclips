{"version":3,"sources":["api.js","secret.js","App.js","serviceWorker.js","index.js"],"names":["API","authtoken","this","NUMBER_OF_FOLLOWS","CLIPS_PER_FOLLOW","axios","defaults","headers","common","follows","dateRange","url","console","log","now","Date","start_date","setDate","getDate","cliparray","follow","params","broadcaster_id","to_id","started_at","toISOString","ended_at","first","options","push","get","Promise","allSettled","user_id","from_id","TWITCH_LOGIN_LINK","client_id","redirect_uri","LOCALREDIRECT","response_type","scope","state","QueryString","stringify","TWITCH_GETUSER_LINK","Clip","clipdata","className","href","alt","title","src","thumbnail_url","broadcaster_name","creator_name","view_count","DateSelect","props","handleChange","bind","onChange","event","setState","target","value","React","Component","App","renderClips","a","usingCache","clipData","user","cookies","api","expireDate","setHours","getHours","cacheDate","userId","getUser","status","resetToLogin","set","data","id","getFollows","getAllClips","parseInt","clipdatas","clips","key","getLoginLink","clip","result","error","reason","sort","b","length","newstate","authToken","document","location","hash","exec","clipdatas0","clipdatas1","clipdatas7","clipdatas30","clipexpire0","clipexpire1","clipexpire7","clipexpire30","handleDateChange","newState","withCookies","Boolean","window","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.40fc1f52.chunk.js","sourcesContent":["import axios from 'axios';\r\nimport QueryString from 'query-string';\r\nimport * as constants from './secret.js';\r\n\r\n// Interfaces with the twitch API\r\n\r\nexport default class API {\r\n  constructor(authtoken) {\r\n\r\n    this.NUMBER_OF_FOLLOWS = 100;\r\n    this.CLIPS_PER_FOLLOW = 10;\r\n\r\n    this.authtoken = authtoken;\r\n    axios.defaults.headers.common['Authorization'] = 'Bearer ' + authtoken;\r\n    axios.defaults.headers.common['Client-ID'] = constants.TWITCH_CLIENT_ID;\r\n  }\r\n\r\n  // Get all clips from a user's followed streamers\r\n  // TODO: Add categories?\r\n  async getAllClips(follows, dateRange) {\r\n\r\n    let url = 'https://api.twitch.tv/helix/clips';\r\n\r\n    console.log(dateRange);\r\n\r\n    if (this.authtoken === null) {\r\n      return null;\r\n    }\r\n    \r\n\r\n    let now = new Date();\r\n    let start_date = new Date();\r\n    start_date.setDate(start_date.getDate() - dateRange);\r\n\r\n    let cliparray = [];\r\n\r\n    for (let follow of follows) {\r\n      let params;\r\n      \r\n      if (dateRange !== 0) {\r\n        params = {\r\n          broadcaster_id : follow.to_id, \r\n          started_at: start_date.toISOString(),\r\n          ended_at: now.toISOString(),\r\n          first: this.CLIPS_PER_FOLLOW,\r\n        };\r\n      } else {\r\n        params = {\r\n          broadcaster_id : follow.to_id, \r\n          first: this.CLIPS_PER_FOLLOW,\r\n        };\r\n      }\r\n      let options = {\r\n        params: params,\r\n      }\r\n  \r\n      cliparray.push(axios.get(url, options));\r\n    }\r\n\r\n    return Promise.allSettled(cliparray)\r\n  }\r\n\r\n  async getUser() {\r\n    let url = 'https://api.twitch.tv/helix/users';\r\n\r\n    return axios.get(url);\r\n  }\r\n\r\n  async getFollows(user_id) {\r\n    let url = 'https://api.twitch.tv/helix/users/follows';\r\n\r\n    let params = {\r\n      from_id: user_id,\r\n      first: this.NUMBER_OF_FOLLOWS,\r\n    }\r\n\r\n    let options = {\r\n      params: params,\r\n    }\r\n\r\n    return axios.get(url, options);\r\n  }\r\n\r\n  async getToken() {\r\n    \r\n    // TODO: Check if token is valid\r\n    return this.authtoken;\r\n  }\r\n\r\n  // Create the login link for oauth2 authentication\r\n  static getLoginLink() {\r\n    \r\n    let url = this.TWITCH_LOGIN_LINK;\r\n\r\n    let params = {\r\n      client_id: constants.TWITCH_CLIENT_ID,\r\n      redirect_uri: this.LOCALREDIRECT,\r\n      response_type: 'token',\r\n      scope: 'user:read:email',\r\n      // TODO: make into random string\r\n      state: constants.SESSION_SECRET,\r\n    }\r\n\r\n    let qString = QueryString.stringify(params);\r\n\r\n    return (url + '?' + qString);\r\n  }\r\n}\r\n\r\nAPI.TWITCH_LOGIN_LINK = 'https://id.twitch.tv/oauth2/authorize';\r\nAPI.LOCALREDIRECT = constants.REDIRECT;\r\nAPI.TWITCH_GETUSER_LINK = 'https://api.twitch.tv/helix/users';\r\n","export const TWITCH_CLIENT_ID = 'iscuhj0tftkxkrcmwcw4slvjj4k9m3';\r\nexport const SESSION_SECRET   = 'gI5j8de6bD9Fgg9zWtPEH6tKuXS9NVHo';\r\n// TEMPORARY! Need to dynamically check and refresh if necessary\r\nexport const REDIRECT = 'http://pooshlmer.github.io/twitchclips/'; // You can run locally with - http://localhost:3000/","import React from 'react';\nimport { instanceOf } from 'prop-types';\nimport { withCookies, Cookies } from 'react-cookie';\nimport API from './api.js';\nimport './App.css';\n\nfunction Clip ({clipdata}) {\n  return (\n    <div className=\"clip\">\n      <a href={clipdata.url}>\n        <img alt={clipdata.title} src={clipdata.thumbnail_url} />\n        <div className=\"cliptitle\"><strong>{clipdata.title}</strong></div>\n      </a>\n      <div>{clipdata.broadcaster_name}</div>\n      <div>Clipped by {clipdata.creator_name}</div>\n      <div>{clipdata.view_count} views</div>\n    </div>\n  );\n}\n\nclass DateSelect extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {dateRange: props.dateRange};\n\n    this.handleChange = this.handleChange.bind(this);\n    this.onChange = props.onChange;\n  }\n\n  handleChange(event) {\n    this.setState({dateRange: event.target.value});\n    this.onChange(event.target.value);\n  }\n\n  render() {\n    return (\n      <label>\n        Filter by:\n        <select value={this.state.dateRange} onChange={this.handleChange}>\n          <option value=\"1\">24H</option>\n          <option value=\"7\">7D</option>\n          <option value=\"30\">30D</option>\n          <option value=\"0\">All</option>\n        </select>\n      </label>\n    );\n  }\n}\n\nclass App extends React.Component {\n\n  static propTypes = {\n    cookies: instanceOf(Cookies).isRequired\n  };\n\n  // On page start check if this is a return with the access token\n  constructor(props) {\n    super(props);\n\n    //const { cookies } = props;\n    let authToken = null;\n    let api = null;\n    // If this is a redirection from a successful login get the auth token from the url\n    if (document.location.hash !== \"\") {\n      let re = /access_token=([^&]+)/;\n      authToken = re.exec(document.location.hash)[1];\n      api = new API(authToken);\n    }\n    this.state = {clips: [<div>Loading clips...please wait</div>], api: api, dateRange: 1,\n      clipdatas0: null,\n      clipdatas1: null,\n      clipdatas7: null,\n      clipdatas30: null,\n      clipexpire0: null,\n      clipexpire1: null,\n      clipexpire7: null,\n      clipexpire30: null,};\n\n    this.handleDateChange = this.handleDateChange.bind(this);\n  }\n\n  resetToLogin() {\n    \n    let clips = [<a key=\"loginlink\" href={API.getLoginLink()}>Login to Twitch to see Clips</a>];\n    this.setState({\n      clips: clips,\n    })\n  }\n\n  handleDateChange(value) {\n    let newState = {dateRange: value, clips: [<div>Loading clips...please wait</div>]}\n    this.setState(newState);\n    this.renderClips(value);\n  }\n\n  componentDidMount() {\n    this.renderClips(1);\n  }\n\n  // Loads clips as an array of Clip objects\n  renderClips = async(value) => {\n\n    let usingCache = false;\n    let clipData = null;\n    let user = null;\n    let follows = null;\n\n    const { cookies } = this.props;\n\n    if (this.state.api !== null) {\n      let expireDate = new Date();\n      expireDate.setHours(expireDate.getHours() - 1);\n      let cacheDate = this.state['clipexpire' + value];\n      if (cacheDate != null && cacheDate > expireDate) {\n        clipData = this.state['clipdatas' + value];\n        usingCache = true;\n      } else {\n        let userId = null;\n        // Can save an api call using cookies\n        if (cookies.get('userId') != null) {\n          userId = cookies.get('userId');\n        } else {\n          user = await this.state.api.getUser();\n          if (user.status !== 200) {\n            this.resetToLogin();\n            return;\n          }\n          cookies.set('userId', user.data.data[0].id);\n        }\n        follows = await this.state.api.getFollows(userId);\n        if (follows.status !== 200) {\n          this.resetToLogin();\n          return;\n        }\n        clipData = await this.state.api.getAllClips(follows.data.data, parseInt(value));\n      }\n    }\n\n    \n    \n    //console.debug(clipData);\n\n    let clipdatas = [];\n    let clips = [];\n\n    // If not logged in use oauth to get the user profile\n    if (clipData === null) {\n      clips.push(<a key=\"loginlink\" href={API.getLoginLink()}>Login to Twitch to see Clips</a>);\n      this.setState({\n        clips: clips,\n      })\n\n    } else {\n      if (usingCache) {\n        for (let clip of clipData) {\n          clipdatas.push(clip); \n        }\n      } else {\n        for (let result of clipData) {\n          //console.debug(result);\n          if (result.status === \"fulfilled\") {\n            for (let clip of result.value.data.data) { \n              clipdatas.push(clip);\n              //clips.push(<Clip key={clip.id} clipdata={clip}/>);\n            }\n          } else {\n            console.error(result.reason);\n          }  \n        }\n      }\n\n      clipdatas.sort((a, b) => {\n        return (b.view_count - a.view_count);\n      });\n\n      if (clipdatas.length === 0) {\n        clips.push(<div>There are no clips from your follows that meet the specified criteria.</div>)\n      }\n\n      for(let clip of clipdatas) {\n        clips.push(<Clip key={clip.id} clipdata={clip}/>);\n      }\n\n      let newstate = {clips: clips};\n      if (!usingCache) {\n        newstate['clipdatas' + value] = clipdatas;\n        newstate['clipexpire' + value] = Date.now();\n      }\n      this.setState(newstate);\n    }\n  }\n\n  render () {\n    return (\n      <div>\n        <div><DateSelect dateRange={this.state.dateRange} onChange={this.handleDateChange} /></div>\n        <div className=\"clipOuterDiv\">{this.state.clips}</div>\n      </div>\n    );\n  }\n}\n\nexport default withCookies(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}